% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resolve.R
\name{resolve}
\alias{resolve}
\title{Resolve one or more futures synchronously}
\usage{
resolve(x, idxs = NULL, recursive = 0, result = FALSE, sleep = 1,
  progress = FALSE, value = result, ...)
}
\arguments{
\item{x}{a list, an environment, or a list environment holding futures
that should be resolved.  May also be a single \link{Future}.}

\item{idxs}{(optional) integer or logical index specifying the subset of
elements to check.}

\item{recursive}{A non-negative number specifying how deep of a recursion
should be done.  If TRUE, an infinite recursion is used.  If FALSE or zero,
no recursion is performed.}

\item{result}{If TRUE, the results are retrieved, otherwise not.}

\item{sleep}{Number of seconds to wait before checking if futures have been
resolved since last time.}

\item{progress}{(DEFUNCT) Defunct since future 1.13.0 to make room for
other progress-update mechanisms that are in the works.}

\item{value}{(DEPRECATED) Use argument `result` instead.}

\item{\dots}{Not used}
}
\value{
Returns \code{x} (regardless of subsetting or not).
}
\description{
This function provides an efficient mechanism for waiting for multiple
futures in a container (e.g. list or environment) to be resolved while in
the meanwhile retrieving values of already resolved futures.
}
\details{
This function is resolves synchronously, i.e. it blocks until \code{x} and
any containing futures are resolved.
}
\seealso{
To resolve a future \emph{variable}, first retrieve its
\link{Future} object using \code{\link{futureOf}()}, e.g.
\code{resolve(futureOf(x))}.
}
